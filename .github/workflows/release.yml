name: Release to Production Server
on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3

      - name: Install Composer Dependencies
        run: composer install --optimize-autoloader --no-dev --no-progress --no-interaction --prefer-dist

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install NPM Dependencies
        run: npm install

      - name: Build NPM Assets
        run: npm run build

      - name: Set Release Name
        id: set_release_name
        run: echo "RELEASE_NAME=new-release-$(date '+%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

      - name: Ensure Releases Directories Exists
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ${{ secrets.VPS_TARGET }}/releases
            mkdir -p ${{ secrets.VPS_TARGET }}/storage

      - name: Synchronize Files To Server
        uses: easingthemes/ssh-deploy@v2.1.5
        with:
          REMOTE_HOST: ${{ secrets.VPS_HOST }}
          REMOTE_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SOURCE: "."
          TARGET: ${{ secrets.VPS_TARGET }}/releases/${{ env.RELEASE_NAME }}

      - name: Copy .env to New Release
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cp ${{ secrets.VPS_TARGET }}/.env ${{ secrets.VPS_TARGET }}/releases/${{ env.RELEASE_NAME }}/.env

      - name: Link Storage Folder to Shared Storage
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.VPS_TARGET }}/releases/${{ env.RELEASE_NAME }}
            ln -sfn ${{ secrets.VPS_TARGET }}/storage storage

      - name: Run Remote/Artisan Commands
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.VPS_TARGET }}/releases/${{ env.RELEASE_NAME }}
            php artisan migrate --force
            php artisan cache:clear
            php artisan queue:restart
            php artisan optimize

      - name: Activate New Release
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.VPS_TARGET }}
            ln -sfn ${{ secrets.VPS_TARGET }}/releases/${{ env.RELEASE_NAME }} current

      - name: Purge Old Releases
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.VPS_TARGET }}/releases
            # List all releases, sort by date (newest first)
            RELEASES=$(ls -1t)
            # Count the number of releases
            RELEASE_COUNT=$(echo "$RELEASES" | wc -l)

            # Only keep the 4 most recent releases if there are more than 4
            if [ $RELEASE_COUNT -gt 4 ]; then
              # Keep the 4 most recent releases
              RELEASES_TO_KEEP=$(echo "$RELEASES" | head -n 4)
              # Loop through all releases
              for release in $RELEASES; do
                if [[ ! " ${RELEASES_TO_KEEP} " =~ " ${release} " ]]; then
                  echo "Removing release: $release"
                  rm -rf "$release"
                fi
              done
            else
              echo "Not enough releases to purge. Keeping all releases."
            fi
